#include<softPwm.h>
#include<wiringPi.h>
#include<stdio.h>
#include<stdlib.h>
#include<signal.h>
#include<unistd.h>

#define R 04
#define G 13
#define B 18

void sig_handler(int sig_num) {
    digitalWrite(R,0);
    digitalWrite(G,0);
    digitalWrite(B,0);
    exit(0);
}

// #define R 7
// #define G 23
// #define B 1
int main(void){
    struct sigaction sa;
    sa.sa_handler = sig_handler;
    sigemptyset(&sa.sa_mask);
    sa.sa_flags = SA_RESTART;

    if (sigaction(SIGINT, &sa, NULL) == -1) {
        perror("sigaction error");
        return -1;
    }

    if(wiringPiSetupGpio() < 0){
        perror("启动树梅派GPIO失败");
        exit(1);
    }
    // 清理引脚
    pinMode(R,OUTPUT);
    pinMode(G,OUTPUT);
    pinMode(B,OUTPUT);
    digitalWrite(R,0);
    digitalWrite(G,0);
    digitalWrite(B,0);

    int initialValue = 0;
    int pwmRange = 50;
    softPwmCreate(R, initialValue, pwmRange);
    softPwmCreate(G, initialValue, pwmRange);
    softPwmCreate(B, initialValue, pwmRange);

    int dutyCycle = 0;
    int increment = 1;
    while(1){
        softPwmWrite(R, dutyCycle);
        softPwmWrite(G, dutyCycle);
        softPwmWrite(B, dutyCycle);
        delay(5);
        dutyCycle += increment;
        if (dutyCycle <= 0 || dutyCycle >= 100) {
            increment = -increment;
        }
    }
    return 0;
}