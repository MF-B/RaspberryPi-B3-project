# 树莓派B3项目 Makefile (支持Web界面)

CC = gcc
CFLAGS = -Wall -Wextra -std=c99 -D_GNU_SOURCE
LIBS = -lwiringPi -lpthread -lcjson -lm

# 源文件目录
SRCDIR = .
COMPDIR = components
COMBODIR = combo
WEBDIR = web

# 目标文件目录
OBJDIR = target

# 创建目标目录
$(shell mkdir -p $(OBJDIR))

# 原始项目源文件
MAIN_SOURCES = main.c
COMP_SOURCES = $(wildcard $(COMPDIR)/*.c)
COMBO_SOURCES = $(wildcard $(COMBODIR)/*.c)

# Web项目源文件
WEB_MAIN_SOURCES = web_main.c
WEB_SOURCES = $(wildcard $(WEBDIR)/*.c)

# 对象文件
MAIN_OBJECTS = $(MAIN_SOURCES:%.c=$(OBJDIR)/%.o)
COMP_OBJECTS = $(COMP_SOURCES:$(COMPDIR)/%.c=$(OBJDIR)/%.o)
COMBO_OBJECTS = $(COMBO_SOURCES:$(COMBODIR)/%.c=$(OBJDIR)/%.o)

WEB_MAIN_OBJECTS = $(WEB_MAIN_SOURCES:%.c=$(OBJDIR)/%.o)
WEB_OBJECTS = $(WEB_SOURCES:$(WEBDIR)/%.c=$(OBJDIR)/web_%.o)

# 所有对象文件
ALL_COMP_OBJECTS = $(COMP_OBJECTS) $(COMBO_OBJECTS)

# 可执行文件
MAIN_TARGET = main
WEB_TARGET = web_main

# 默认目标：编译两个版本
all: $(MAIN_TARGET) $(WEB_TARGET)

# 原始命令行版本
$(MAIN_TARGET): $(MAIN_OBJECTS) $(ALL_COMP_OBJECTS)
	@echo "正在链接原始命令行版本..."
	$(CC) $(CFLAGS) -o $@ $^ $(LIBS)
	@echo "原始版本编译完成: $@"

# Web版本
$(WEB_TARGET): $(WEB_MAIN_OBJECTS) $(ALL_COMP_OBJECTS) $(WEB_OBJECTS)
	@echo "正在链接Web服务器版本..."
	$(CC) $(CFLAGS) -o $@ $^ $(LIBS)
	@echo "Web版本编译完成: $@"

# 编译主程序对象文件
$(OBJDIR)/%.o: %.c
	@echo "编译主程序: $<"
	$(CC) $(CFLAGS) -c $< -o $@

# 编译组件对象文件
$(OBJDIR)/%.o: $(COMPDIR)/%.c
	@echo "编译组件: $<"
	$(CC) $(CFLAGS) -c $< -o $@

# 编译组合功能对象文件
$(OBJDIR)/%.o: $(COMBODIR)/%.c
	@echo "编译组合功能: $<"
	$(CC) $(CFLAGS) -c $< -o $@

# 编译Web对象文件
$(OBJDIR)/web_%.o: $(WEBDIR)/%.c
	@echo "编译Web模块: $<"
	$(CC) $(CFLAGS) -c $< -o $@

# 只编译原始版本
main-only: $(MAIN_TARGET)

# 只编译Web版本
web-only: $(WEB_TARGET)

# 运行原始版本
run: $(MAIN_TARGET)
	@echo "运行原始命令行版本..."
	sudo ./$(MAIN_TARGET)

# 运行Web版本
run-web: $(WEB_TARGET)
	@echo "运行Web服务器版本..."
	sudo ./$(WEB_TARGET)

# 安装依赖
install-deps:
	@echo "安装系统依赖..."
	sudo apt-get update
	sudo apt-get install -y build-essential
	sudo apt-get install -y wiringpi
	sudo apt-get install -y libcjson-dev
	@echo "依赖安装完成"

# 检查依赖
check-deps:
	@echo "检查依赖..."
	@echo -n "检查gcc: "
	@which gcc > /dev/null && echo "✓" || echo "✗ 未安装"
	@echo -n "检查WiringPi: "
	@pkg-config --exists wiringPi && echo "✓" || echo "✗ 未安装"
	@echo -n "检查cJSON: "
	@pkg-config --exists libcjson && echo "✓" || echo "✗ 未安装"

# 清理编译文件
clean:
	@echo "清理编译文件..."
	rm -rf $(OBJDIR)/*.o
	rm -f $(MAIN_TARGET) $(WEB_TARGET)
	@echo "清理完成"

# 创建发布包
package: clean all
	@echo "创建发布包..."
	mkdir -p release/bin
	mkdir -p release/web
	cp $(MAIN_TARGET) $(WEB_TARGET) release/bin/
	cp -r web/static release/web/
	cp README.md release/
	tar -czf raspberry-pi-b3-project.tar.gz release/
	rm -rf release/
	@echo "发布包已创建: raspberry-pi-b3-project.tar.gz"

# 部署到树莓派
deploy: package
	@echo "部署到树莓派..."
	@read -p "输入树莓派IP地址: " IP; \
	scp raspberry-pi-b3-project.tar.gz pi@$$IP:~/ && \
	ssh pi@$$IP "tar -xzf raspberry-pi-b3-project.tar.gz && cd release && sudo chmod +x bin/*"

# 显示帮助信息
help:
	@echo "可用的make目标:"
	@echo "  all         - 编译所有版本 (默认)"
	@echo "  main-only   - 只编译原始命令行版本"
	@echo "  web-only    - 只编译Web服务器版本"
	@echo "  run         - 运行原始版本"
	@echo "  run-web     - 运行Web版本"
	@echo "  install-deps- 安装系统依赖"
	@echo "  check-deps  - 检查依赖状态"
	@echo "  clean       - 清理编译文件"
	@echo "  package     - 创建发布包"
	@echo "  deploy      - 部署到树莓派"
	@echo "  help        - 显示此帮助信息"
	@echo ""
	@echo "使用示例:"
	@echo "  make              # 编译所有版本"
	@echo "  make run-web      # 运行Web版本"
	@echo "  make install-deps # 安装依赖"

# 声明伪目标
.PHONY: all main-only web-only run run-web install-deps check-deps clean package deploy help

# 默认目标
.DEFAULT_GOAL := all
